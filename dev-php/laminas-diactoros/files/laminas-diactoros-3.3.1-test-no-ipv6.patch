--- ../test/ServerRequestFilter/FilterUsingXForwardedHeadersTest.php	2024-08-12 02:37:45.810886316 +0300
+++ ../test/ServerRequestFilter/FilterUsingXForwardedHeadersTest.php	2024-08-12 02:38:58.340582668 +0300
@@ -263,9 +263,6 @@
         yield 'ipv4-class-a' => ['10.10.10.10'];
         yield 'ipv4-class-b' => ['172.16.16.16'];
         yield 'ipv4-class-c' => ['192.168.2.1'];
-        yield 'ipv6-localhost' => ['::1'];
-        yield 'ipv6-private' => ['fdb4:d239:27bc:1d9f:0001:0001:0001:0001'];
-        yield 'ipv6-local-link' => ['fe80:0000:0000:0000:abcd:abcd:abcd:abcd'];
     }
 
     /** @dataProvider trustedReservedNetworkList */
@@ -303,9 +300,6 @@
         yield 'ipv4-no-class-a' => ['19.10.10.10'];
         yield 'ipv4-not-class-b' => ['173.16.16.16'];
         yield 'ipv4-not-class-c' => ['193.168.2.1'];
-        yield 'ipv6-not-localhost' => ['::2'];
-        yield 'ipv6-not-private' => ['fab4:d239:27bc:1d9f:0001:0001:0001:0001'];
-        yield 'ipv6-not-local-link' => ['ef80:0000:0000:0000:abcd:abcd:abcd:abcd'];
     }
 
     /** @dataProvider unreservedNetworkAddressList */
--- ../test/ServerRequestFilter/IPRangeTest.php	2024-08-12 02:41:34.818014379 +0300
+++ ../test/ServerRequestFilter/IPRangeTest.php	2024-08-12 02:42:29.862502164 +0300
@@ -44,39 +44,6 @@
     }
 
     /**
-     * @psalm-return array<string, array{
-     *     0: bool,
-     *     1: string,
-     *     2: string,
-     * }>
-     */
-    public function IPv6Data(): array
-    {
-        // @codingStandardsIgnoreStart
-        return [
-            'valid - ipv4 subnet'                                 => [true, '2a01:198:603:0:396e:4789:8e99:890f', '2a01:198:603:0::/65'],
-            'valid - exact'                                       => [true, '0:0:0:0:0:0:0:1', '::1'],
-            'valid - all subnets'                                 => [true, '0:0:603:0:396e:4789:8e99:0001', '::/0'],
-            'valid - subnet expands to all'                       => [true, '0:0:603:0:396e:4789:8e99:0001', '2a01:198:603:0::/0'],
-            'invalid - not in subnet'                             => [false, '2a00:198:603:0:396e:4789:8e99:890f', '2a01:198:603:0::/65'],
-            'invalid - does not match exact'                      => [false, '2a01:198:603:0:396e:4789:8e99:890f', '::1'],
-            'invalid - compressed notation, does not match exact' => [false, '0:0:603:0:396e:4789:8e99:0001', '::1'],
-            'invalid - garbage IP'                                => [false, '}__test|O:21:&quot;JDatabaseDriverMysqli&quot;:3:{s:2', '::1'],
-            'invalid - invalid cidr'                              => [false, '2a01:198:603:0:396e:4789:8e99:890f', 'unknown'],
-            'invalid - empty IP address'                          => [false, '', '::1'],
-        ];
-        // @codingStandardsIgnoreEnd
-    }
-
-    /**
-     * @dataProvider IPv6Data
-     */
-    public function testIPv6(bool $result, string $remoteAddr, string $cidr): void
-    {
-        $this->assertSame($result, IPRange::matchesIPv6($remoteAddr, $cidr));
-    }
-
-    /**
      * @psalm-return iterable<string, array{
      *     0: bool,
      *     1: string,
@@ -89,16 +56,5 @@
             $name = "IPv4 - {$test}";
             yield $name => $data;
         }
-
-        foreach ($this->IPv6Data() as $test => $data) {
-            $name = "IPv6 - {$test}";
-            yield $name => $data;
-        }
-    }
-
-    /** @dataProvider combinedData */
-    public function testCombinedIPv4AndIPv6Pool(bool $result, string $remoteAddr, string $cidr): void
-    {
-        $this->assertSame($result, IPRange::matches($remoteAddr, $cidr));
     }
 }
