--- a/inc/cc++/persist.h
+++ b/inc/cc++/persist.h
@@ -266,7 +266,7 @@
      * to this call or problems will ensue. If built using zlib compress
          * can be used to enable compression
      */
-    Engine(std::iostream& stream, EngineMode mode, bool compress=true) THROWS (PersistException);
+    Engine(std::iostream& stream, EngineMode mode, bool compress=true);
 
     /**
      * This Flushes the buffers and closes the Persistence::Engine
@@ -287,36 +287,36 @@
     /**
      * writes a BaseObject from a reference.
      */
-    void write(const BaseObject &object) THROWS (PersistException)
+    void write(const BaseObject &object)
     { write(&object); };
 
     /**
      * writes a BaseObject from a pointer.
      */
-    void write(const BaseObject *object) THROWS (PersistException);
+    void write(const BaseObject *object);
 
     // writes supported primitive types
     // shortcut, to make the following more readable
 #define CCXX_ENGINEWRITE_REF(valref) writeBinary((const uint8*)&valref,sizeof(valref))
-    void write(int8 i)   THROWS (PersistException) { CCXX_ENGINEWRITE_REF(i); }
-    void write(uint8 i)  THROWS (PersistException) { CCXX_ENGINEWRITE_REF(i); }
-    void write(int16 i)  THROWS (PersistException) { CCXX_ENGINEWRITE_REF(i); }
-    void write(uint16 i) THROWS (PersistException) { CCXX_ENGINEWRITE_REF(i); }
-    void write(int32 i)  THROWS (PersistException) { CCXX_ENGINEWRITE_REF(i); }
-    void write(uint32 i) THROWS (PersistException) { CCXX_ENGINEWRITE_REF(i); }
+    void write(int8 i)   { CCXX_ENGINEWRITE_REF(i); }
+    void write(uint8 i)  { CCXX_ENGINEWRITE_REF(i); }
+    void write(int16 i)  { CCXX_ENGINEWRITE_REF(i); }
+    void write(uint16 i) { CCXX_ENGINEWRITE_REF(i); }
+    void write(int32 i)  { CCXX_ENGINEWRITE_REF(i); }
+    void write(uint32 i) { CCXX_ENGINEWRITE_REF(i); }
 #ifdef  HAVE_64_BITS
-    void write(int64 i)  THROWS (PersistException) { CCXX_ENGINEWRITE_REF(i); }
-    void write(uint64 i) THROWS (PersistException) { CCXX_ENGINEWRITE_REF(i); }
+    void write(int64 i)  { CCXX_ENGINEWRITE_REF(i); }
+    void write(uint64 i) { CCXX_ENGINEWRITE_REF(i); }
 #endif
-    void write(float i)  THROWS (PersistException) { CCXX_ENGINEWRITE_REF(i); }
-    void write(double i) THROWS (PersistException) { CCXX_ENGINEWRITE_REF(i); }
+    void write(float i)  { CCXX_ENGINEWRITE_REF(i); }
+    void write(double i) { CCXX_ENGINEWRITE_REF(i); }
 #undef CCXX_ENGINEWRITE_REF
 
-    void write(const String& str) THROWS (PersistException);
-    void write(const std::string& str) THROWS (PersistException);
+    void write(const String& str);
+    void write(const std::string& str);
 
     // Every write operation boils down to one or more of these
-    void writeBinary(const uint8* data, const uint32 size) THROWS (PersistException);
+    void writeBinary(const uint8* data, const uint32 size);
 
 
     // Read Operations
@@ -324,47 +324,47 @@
     /**
      * reads a BaseObject into a reference overwriting the object.
      */
-    void read(BaseObject &object) THROWS (PersistException);
+    void read(BaseObject &object);
 
     /**
      * reads a BaseObject into a pointer allocating memory for the object if necessary.
      */
-    void read(BaseObject *&object) THROWS (PersistException);
+    void read(BaseObject *&object);
 
     // reads supported primitive types
   // shortcut, to make the following more readable
 #define CCXX_ENGINEREAD_REF(valref) readBinary((uint8*)&valref,sizeof(valref))
-    void read(int8& i)   THROWS (PersistException) { CCXX_ENGINEREAD_REF(i); }
-    void read(uint8& i)  THROWS (PersistException) { CCXX_ENGINEREAD_REF(i); }
-    void read(int16& i)  THROWS (PersistException) { CCXX_ENGINEREAD_REF(i); }
-    void read(uint16& i) THROWS (PersistException) { CCXX_ENGINEREAD_REF(i); }
-    void read(int32& i)  THROWS (PersistException) { CCXX_ENGINEREAD_REF(i); }
-    void read(uint32& i) THROWS (PersistException) { CCXX_ENGINEREAD_REF(i); }
+    void read(int8& i)   { CCXX_ENGINEREAD_REF(i); }
+    void read(uint8& i)  { CCXX_ENGINEREAD_REF(i); }
+    void read(int16& i)  { CCXX_ENGINEREAD_REF(i); }
+    void read(uint16& i) { CCXX_ENGINEREAD_REF(i); }
+    void read(int32& i)  { CCXX_ENGINEREAD_REF(i); }
+    void read(uint32& i) { CCXX_ENGINEREAD_REF(i); }
 #ifdef  HAVE_64_BITS
-    void read(int64& i)  THROWS (PersistException) { CCXX_ENGINEREAD_REF(i); }
-    void read(uint64& i) THROWS (PersistException) { CCXX_ENGINEREAD_REF(i); }
+    void read(int64& i)  { CCXX_ENGINEREAD_REF(i); }
+    void read(uint64& i) { CCXX_ENGINEREAD_REF(i); }
 #endif
-    void read(float& i)  THROWS (PersistException) { CCXX_ENGINEREAD_REF(i); }
-    void read(double& i) THROWS (PersistException) { CCXX_ENGINEREAD_REF(i); }
+    void read(float& i)  { CCXX_ENGINEREAD_REF(i); }
+    void read(double& i) { CCXX_ENGINEREAD_REF(i); }
 #undef CCXX_ENGINEREAD_REF
 
-    void read(String& str) THROWS (PersistException);
-    void read(std::string& str) THROWS (PersistException);
+    void read(String& str);
+    void read(std::string& str);
 
     // Every read operation boild down to one or more of these
-    void readBinary(uint8* data, uint32 size) THROWS (PersistException);
+    void readBinary(uint8* data, uint32 size);
 
 private:
     /**
      * reads the actual object data into a pre-instantiated object pointer
      * by calling the read function of the derived class.
      */
-    void readObject(BaseObject* object) THROWS (PersistException);
+    void readObject(BaseObject* object);
 
     /**
      * reads in a class name, and caches it into the ClassMap.
      */
-    const String readClass() THROWS (PersistException);
+    const String readClass();
 
 
     /**
@@ -402,80 +402,80 @@
 
 // Standard >> and << stream operators for BaseObject
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, BaseObject &ob)      THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, BaseObject &ob);
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, BaseObject *&ob)      THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, BaseObject *&ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, BaseObject const &ob) THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, BaseObject const &ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, BaseObject const *ob) THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, BaseObject const *ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, int8& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, int8& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, int8 ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, int8 ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, uint8& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, uint8& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, uint8 ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, uint8 ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, int16& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, int16& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, int16 ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, int16 ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, uint16& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, uint16& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, uint16 ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, uint16 ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, int32& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, int32& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, int32 ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, int32 ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, uint32& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, uint32& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, uint32 ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, uint32 ob);
 
 #ifdef  HAVE_64_BITS
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, int64& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, int64& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, int64 ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, int64 ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, uint64& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, uint64& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, uint64 ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, uint64 ob);
 #endif
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, float& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, float& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, float ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, float ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, double& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, double& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, double ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, double ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, String& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, String& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, String ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, String ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, std::string& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, std::string& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, std::string ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, std::string ob);
 
 /** @relates Engine */
-__EXPORT Engine& operator >>( Engine& ar, bool& ob) THROWS (PersistException);
+__EXPORT Engine& operator >>( Engine& ar, bool& ob);
 /** @relates Engine */
-__EXPORT Engine& operator <<( Engine& ar, bool ob)  THROWS (PersistException);
+__EXPORT Engine& operator <<( Engine& ar, bool ob);
 
 /**
  * The following are templated classes
@@ -487,7 +487,7 @@
  * the engine
  */
 template<class T>
-Engine& operator <<( Engine& ar, typename std::vector<T> const& ob) THROWS (PersistException)
+Engine& operator <<( Engine& ar, typename std::vector<T> const& ob)
 {
     ar << (uint32)ob.size();
     for(unsigned int i=0; i < ob.size(); ++i)
@@ -501,7 +501,7 @@
  * an engine.
  */
 template<class T>
-Engine& operator >>( Engine& ar, typename std::vector<T>& ob) THROWS (PersistException)
+Engine& operator >>( Engine& ar, typename std::vector<T>& ob)
 {
     ob.clear();
     uint32 siz;
@@ -518,7 +518,7 @@
  * the engine
  */
 template<class T>
-Engine& operator <<( Engine& ar, typename std::deque<T> const& ob) THROWS (PersistException)
+Engine& operator <<( Engine& ar, typename std::deque<T> const& ob)
 {
     ar << (uint32)ob.size();
   for(typename std::deque<T>::const_iterator it=ob.begin(); it != ob.end(); ++it)
@@ -532,7 +532,7 @@
  * an engine.
  */
 template<class T>
-Engine& operator >>( Engine& ar, typename std::deque<T>& ob) THROWS (PersistException)
+Engine& operator >>( Engine& ar, typename std::deque<T>& ob)
 {
     ob.clear();
     uint32 siz;
@@ -553,7 +553,7 @@
  * to an engine.
  */
 template<class Key, class Value>
-Engine& operator <<( Engine& ar, typename std::map<Key,Value> const & ob) THROWS (PersistException)
+Engine& operator <<( Engine& ar, typename std::map<Key,Value> const & ob)
 {
     ar << (uint32)ob.size();
     for(typename std::map<Key,Value>::const_iterator it = ob.begin();it != ob.end();++it)
@@ -567,7 +567,7 @@
  * from an engine.
  */
 template<class Key, class Value>
-Engine& operator >>( Engine& ar, typename std::map<Key,Value>& ob) THROWS (PersistException)
+Engine& operator >>( Engine& ar, typename std::map<Key,Value>& ob)
 {
     ob.clear();
     uint32 siz;
@@ -585,7 +585,7 @@
  * serialize a pair of some serializable content to the engine.
  */
 template<class x, class y>
-Engine& operator <<( Engine& ar, std::pair<x,y> &ob) THROWS (PersistException)
+Engine& operator <<( Engine& ar, std::pair<x,y> &ob)
 {
     ar << ob.first << ob.second;
     return ar;
@@ -596,7 +596,7 @@
  * deserialize a pair of some serializable content to the engine.
  */
 template<class x, class y>
-Engine& operator >>(Engine& ar, std::pair<x, y> &ob) THROWS (PersistException)
+Engine& operator >>(Engine& ar, std::pair<x, y> &ob)
 {
     ar >> ob.first >> ob.second;
     return ar;
--- a/inc/cc++/string.h
+++ b/inc/cc++/string.h
@@ -887,7 +887,7 @@
     /**
      * Create a new object in string managed space.
      */
-    void *operator new(size_t size) NEW_THROWS;
+    void *operator new(size_t size);
 
     /**
      * Delete object from string managed space.
--- a/inc/cc++/tokenizer.h
+++ b/inc/cc++/tokenizer.h
@@ -174,7 +174,7 @@
         /**
          * shifts this iterator to the next token in the string.
          */
-        iterator &operator ++ () THROWS (NoSuchElementException);
+        iterator &operator ++ ();
 
         /**
          * returns the immutable string this iterator
@@ -184,7 +184,7 @@
          * invalidated for each iteration. If you need the token,
          * copy it (e.g. with strdup());
          */
-        const char*  operator *  () THROWS (NoSuchElementException);
+        const char*  operator *  ();
 
         /**
          * returns the next delimiter after the current token or
--- a/src/digest.cpp
+++ b/src/digest.cpp
@@ -160,7 +160,7 @@
 {
     crc32 = crc.crc32;
     crc_reg = crc.crc_reg;
-    register int32 i;
+    int32 i;
     for (i = 0; i < 256; i++) {
         crc_table[i] = crc.crc_table[i];
     }
@@ -176,8 +176,8 @@
     crc_reg = 0xFFFFFFFF;
 
     // Initialize the lookup table
-    register int32 i,j;
-    register uint32 crc;
+    int32 i,j;
+    uint32 crc;
 
     for (i = 0; i < 256; i++) {
         crc = ( (uint32) i << 24 );
@@ -223,7 +223,7 @@
   crc32   = right.crc32;
     crc_reg = right.crc_reg;
 
-    register int32 i;
+    int32 i;
     for (i = 0; i < 256; i++) {
         crc_table[i] = right.crc_table[i];
     }
--- a/src/engine.cpp
+++ b/src/engine.cpp
@@ -66,7 +66,7 @@
 
 const uint32 NullObject = 0xffffffff;
 
-Engine::Engine(std::iostream& stream, EngineMode mode, bool compress) THROWS (PersistException) :
+Engine::Engine(std::iostream& stream, EngineMode mode, bool compress) :
 myUnderlyingStream(stream), myOperationalMode(mode), use_compression(compress)
 {
   // Nothing else to initialise for now
@@ -148,7 +148,7 @@
 #endif
 }
 
-void Engine::writeBinary(const uint8* data, const uint32 size) THROWS (PersistException)
+void Engine::writeBinary(const uint8* data, const uint32 size)
 {
     if ( myOperationalMode != modeWrite )
         THROW (PersistException( "Cannot write to an input Engine" ));
@@ -192,7 +192,7 @@
 #endif
 }
 
-void Engine::readBinary(uint8* data, uint32 size) THROWS (PersistException)
+void Engine::readBinary(uint8* data, uint32 size)
 {
     if ( myOperationalMode != modeRead )
         THROW (PersistException( "Cannot read from an output Engine" ));
@@ -250,7 +250,7 @@
  * note, does not (yet?) throw an exception, but interface
  * prepared ..
  */
-void Engine::write(const BaseObject *object) THROWS (PersistException)
+void Engine::write(const BaseObject *object)
 {
     // Pre-step, if object is NULL, then don't serialise it - serialise a
     // marker to say that it is null.
@@ -294,7 +294,7 @@
 /*
  * reads in a BaseObject into a reference (pre-instantiated object)
  */
-void Engine::read(BaseObject &object) THROWS (PersistException)
+void Engine::read(BaseObject &object)
 {
     uint32 id = 0;
     read(id);
@@ -318,7 +318,7 @@
 /*
  * reads in a BaseObject into a pointer allocating if the pointer is NULL
  */
-void Engine::read(BaseObject *&object) THROWS (PersistException)
+void Engine::read(BaseObject *&object)
 {
     uint32 id = 0;
     read(id);
@@ -356,7 +356,7 @@
 /*
  * reads the actual object data in
  */
-void Engine::readObject(BaseObject* object) THROWS (PersistException)
+void Engine::readObject(BaseObject* object)
 {
     // Okay then - we can make this object
     myArchiveVector.push_back(object);
@@ -373,7 +373,7 @@
 /*
  * reads the class information in
  */
-const String Engine::readClass() THROWS (PersistException)
+const String Engine::readClass()
 {
     // Okay - read the identifier for the class in...
     uint32 classId = 0;
@@ -394,14 +394,14 @@
  * note, does not (yet?) throw an exception, but interface
  * prepared ..
  */
-void Engine::write(const String& str) THROWS (PersistException)
+void Engine::write(const String& str)
 {
     uint32 len = (uint32)str.length();
     write(len);
     writeBinary((uint8*)str.c_str(),len);
 }
 
-void Engine::read(String& str) THROWS (PersistException)
+void Engine::read(String& str)
 {
     uint32 len = 0;
     read(len);
@@ -416,14 +416,14 @@
  * note, does not (yet?) throw an exception, but interface
  * prepared ..
  */
-void Engine::write(const std::string& str) THROWS (PersistException)
+void Engine::write(const std::string& str)
 {
     uint32 len = (uint32)str.length();
     write(len);
     writeBinary((uint8*)str.c_str(),len);
 }
 
-void Engine::read(std::string& str) THROWS (PersistException)
+void Engine::read(std::string& str)
 {
     uint32 len = 0;
     read(len);
@@ -437,54 +437,54 @@
 #define CCXX_RE(ar,ob)   ar.read(ob); return ar
 #define CCXX_WE(ar,ob)   ar.write(ob); return ar
 
-Engine& operator >>( Engine& ar, BaseObject &ob) THROWS (PersistException) {CCXX_RE(ar,ob);}
-Engine& operator >>( Engine& ar, BaseObject *&ob) THROWS (PersistException) {CCXX_RE(ar,ob);}
-Engine& operator <<( Engine& ar, BaseObject const &ob) THROWS (PersistException) {CCXX_WE(ar,&ob);}
-Engine& operator <<( Engine& ar, BaseObject const *ob) THROWS (PersistException) {CCXX_WE(ar,ob);}
+Engine& operator >>( Engine& ar, BaseObject &ob) {CCXX_RE(ar,ob);}
+Engine& operator >>( Engine& ar, BaseObject *&ob) {CCXX_RE(ar,ob);}
+Engine& operator <<( Engine& ar, BaseObject const &ob) {CCXX_WE(ar,&ob);}
+Engine& operator <<( Engine& ar, BaseObject const *ob) {CCXX_WE(ar,ob);}
 
-Engine& operator >>( Engine& ar, int8& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, int8 ob) THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, int8& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, int8 ob) {CCXX_WE (ar,ob);}
 
-Engine& operator >>( Engine& ar, uint8& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, uint8 ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, uint8& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, uint8 ob) {CCXX_WE (ar,ob);}
 
-Engine& operator >>( Engine& ar, int16& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, int16 ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, int16& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, int16 ob) {CCXX_WE (ar,ob);}
 
-Engine& operator >>( Engine& ar, uint16& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, uint16 ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, uint16& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, uint16 ob) {CCXX_WE (ar,ob);}
 
-Engine& operator >>( Engine& ar, int32& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, int32 ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, int32& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, int32 ob) {CCXX_WE (ar,ob);}
 
-Engine& operator >>( Engine& ar, uint32& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, uint32 ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, uint32& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, uint32 ob) {CCXX_WE (ar,ob);}
 
 #ifdef  HAVE_64_BITS
-Engine& operator >>( Engine& ar, int64& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, int64 ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, int64& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, int64 ob) {CCXX_WE (ar,ob);}
 
-Engine& operator >>( Engine& ar, uint64& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, uint64 ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, uint64& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, uint64 ob) {CCXX_WE (ar,ob);}
 #endif
 
-Engine& operator >>( Engine& ar, float& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, float ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, float& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, float ob) {CCXX_WE (ar,ob);}
 
-Engine& operator >>( Engine& ar, double& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, double ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, double& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, double ob) {CCXX_WE (ar,ob);}
 
-Engine& operator >>( Engine& ar, String& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, String ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, String& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, String ob) {CCXX_WE (ar,ob);}
 
-Engine& operator >>( Engine& ar, std::string& ob) THROWS (PersistException) {CCXX_RE (ar,ob);}
-Engine& operator <<( Engine& ar, std::string ob)  THROWS (PersistException) {CCXX_WE (ar,ob);}
+Engine& operator >>( Engine& ar, std::string& ob) {CCXX_RE (ar,ob);}
+Engine& operator <<( Engine& ar, std::string ob) {CCXX_WE (ar,ob);}
 
-Engine& operator >>( Engine& ar, bool& ob) THROWS (PersistException) {
+Engine& operator >>( Engine& ar, bool& ob) {
     uint32 a; ar.read(a); ob=a==1;return ar;
 }
 
-Engine& operator <<( Engine& ar, bool ob) THROWS (PersistException) {
+Engine& operator <<( Engine& ar, bool ob) {
     uint32 a=ob?1:0; ar.write(a); return ar;
 }
 
--- a/src/map.cpp
+++ b/src/map.cpp
@@ -135,7 +135,7 @@
 
     enterMutex();
     obj = *map;
-    for (register unsigned i = 0; obj == NULL && i < range; i++)
+    for (unsigned i = 0; obj == NULL && i < range; i++)
         obj = map[i];
     leaveMutex();
     return obj;
@@ -149,7 +149,7 @@
         return NULL;
 
     enterMutex();
-    for (register int i = range - 1; obj == NULL && i >= 0; i--)
+    for (int i = range - 1; obj == NULL && i >= 0; i--)
         obj = map[i];
 
     if ( obj != NULL )
--- a/src/string.cpp
+++ b/src/string.cpp
@@ -904,7 +904,7 @@
     return os;
 }
 
-void *StringObject::operator new(size_t size) NEW_THROWS
+void *StringObject::operator new(size_t size)
 {
     char *base;
     size_t *sp;
--- a/src/tokenizer.cpp
+++ b/src/tokenizer.cpp
@@ -74,7 +74,7 @@
 }
 
 
-StringTokenizer::iterator& StringTokenizer::iterator::operator ++ () THROWS (StringTokenizer::NoSuchElementException)
+StringTokenizer::iterator& StringTokenizer::iterator::operator ++ ()
 {
 
     // someone requested to read beyond the end .. tsts
@@ -110,7 +110,7 @@
  * if no one requests the token, no time is spent skipping the whitespaces
  * or allocating memory.
  */
-const char * StringTokenizer::iterator::operator * () THROWS (StringTokenizer::NoSuchElementException)
+const char * StringTokenizer::iterator::operator * ()
 {
     // someone requested to read beyond the end .. tsts
     if (endp == myTok->itEnd.endp)
